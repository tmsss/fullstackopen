{"ast":null,"code":"var _jsxFileName = \"/home/tmsss/Documents/courses/fullstackopen/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StatisticLine = props => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n\n_c = StatisticLine;\n\nconst Statistics = props => {\n  const getAll = () => props.clicks.good + props.clicks.neutral + props.clicks.bad;\n\n  const getPositive = () => props.clicks.good / getAll() * 100;\n\n  const getAverage = () => (props.clicks.good * 1 + props.clicks.bad * -1) / getAll();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this), getAll() > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"good\",\n          value: props.clicks.good\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"neutral\",\n          value: props.clicks.neutral\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"bad\",\n          value: props.clicks.bad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"all\",\n          value: getAll()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"average\",\n          value: getAverage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n          text: \"positive\",\n          value: getPositive()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n};\n\n_c2 = Statistics;\n\nconst Button = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: props.handleClick,\n  children: props.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 42,\n  columnNumber: 3\n}, this);\n\n_c3 = Button;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [clicks, setClicks] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0\n  });\n\n  const setValue = property => {\n    const newClicks = { ...clicks,\n      [property]: clicks[property] + 1\n    };\n    setClicks(newClicks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setValue('good'),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setValue('neutral'),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setValue('bad'),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      clicks: clicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"33GhSbtliTqDxM/CDVQyJqgNZmA=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StatisticLine\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/home/tmsss/Documents/courses/fullstackopen/part1/unicafe/src/App.js"],"names":["React","useState","StatisticLine","props","text","value","Statistics","getAll","clicks","good","neutral","bad","getPositive","getAverage","Button","handleClick","App","setClicks","setValue","property","newClicks"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst StatisticLine = props => (\n  <tr>\n    <td>{props.text}</td>\n    <td>{props.value}</td>\n  </tr>\n)  \n\n\nconst Statistics = (props) => {\n  const getAll = () => props.clicks.good + props.clicks.neutral + props.clicks.bad\n\n  const getPositive = () => props.clicks.good / getAll() * 100\n\n  const getAverage = () => (props.clicks.good * 1 + props.clicks.bad * -1) / getAll()\n\n  return (\n    <>\n    <h1>statistics</h1>\n    { getAll() > 0 ? \n    <table>\n      <tbody>\n        <StatisticLine text=\"good\" value={props.clicks.good} />\n        <StatisticLine text=\"neutral\" value={props.clicks.neutral} />\n        <StatisticLine text=\"bad\" value={props.clicks.bad} />\n        <StatisticLine text=\"all\" value={getAll()} />\n        <StatisticLine text=\"average\" value={getAverage()} />\n        <StatisticLine text=\"positive\" value={getPositive()} />\n      </tbody>\n    </table> : \n    <>\n      <p>No feedback given</p>\n    </>\n    }\n    </>\n    \n  )\n}\n\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n  </button>\n)\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [clicks, setClicks] = useState({\n    good: 0, neutral: 0, bad: 0\n  })\n\n  const setValue = property => {\n    const newClicks = { \n      ...clicks, \n      [property]: clicks[property] + 1 \n    }\n    setClicks(newClicks)\n  }\n\n\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button handleClick={() => setValue('good')} text=\"good\" />\n      <Button handleClick={() => setValue('neutral')} text=\"neutral\" />\n      <Button handleClick={() => setValue('bad')} text=\"bad\" />\n      <Statistics clicks={clicks} />\n\n      \n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}